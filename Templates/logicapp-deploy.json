{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "logicAppName": {
            "type": "string",
            "defaultValue":"device-status-update-app",
            "metadata": {
                "description": "Logic App name."
            }
        },
        "logAnalyticsConnectionName": {
            "type": "String",
            "defaultValue": "azureloganalyticsdatacollector",
            "metadata": {
                "description": "Name of log analytics connection in logic app."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Resource location for all resources to be created."
            }
        },
        "logAnalyticsResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "Log analytics resource group"
            }
        },
        "logAnalyticsWorkspaceName": {
            "type": "string",
            "metadata": {
                "description": "Log analytics workspace name"
            }
        },
        "environmentHashId": {
        "type": "string",
        "metadata": {
            "description": "Unique alphanumeric id to append to multiple resource names."
        }
        },
        "iotHubResourceGroup": {
            "type": "string",
            "defaultValue": "[resourceGroup().name]",
            "metadata": {
                "description": "IoT Hub resource group"
            }
        },
        "iotHubName" : {
            "type": "string",
            "metadata": {
                "description": "IoT Hub where status events will be collected."
            }
        },
        "customTags": {
        "type": "object",
        "defaultValue": {},
        "metadata": {
            "description": "Custom tags to be added to resources created. In the format '{ \"tag1\": \"value1\", \"tag2\": \"value2\" }'"
        }
        }        
    },
    "variables": {
    "systemTopicName": "[concat('statusupdate-', parameters('environmentHashId'))]"
    },
    "resources": [
            {
                "type": "Microsoft.EventGrid/systemTopics",
                "apiVersion": "2021-06-01-preview",
                "name": "[variables('systemTopicName')]",
                "tags": "[parameters('customTags')]",
                "location": "[parameters('location')]",
                "properties": {
                    "source": "[resourceId(parameters('iotHubResourceGroup'),'Microsoft.Devices/IotHubs', parameters('iotHubName'))]",
                    //"source": "[parameters('iotHubResourceId')]",
                    "topicType": "Microsoft.Devices.IoTHubs"
                }
            },
            {
                "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
                "apiVersion": "2021-06-01-preview",
                "name": "[concat(variables('systemTopicName'), '/eventgrid-to-logicapp')]",
                "tags": "[parameters('customTags')]",
                "dependsOn": [
                    "[resourceId('Microsoft.EventGrid/systemTopics', variables('systemTopicName'))]",
                    "[resourceId('Microsoft.Logic/workflows', parameters('logicAppName'))]"
                ],
                "properties": {
                    "destination": {
                        "properties": {
                            "maxEventsPerBatch": 1,
                            "preferredBatchSizeInKilobytes": 64,
                            "endpointUrl": "[listCallbackURL(concat(resourceId('Microsoft.Logic/workflows', parameters('logicAppName')), '/triggers/manual'), '2016-06-01').value]"
                        },
                        "endpointType": "WebHook"
                    },
                    "filter": {
                        "includedEventTypes": [
                            "Microsoft.Devices.DeviceConnected",
                            "Microsoft.Devices.DeviceDisconnected"
                        ],
                        "enableAdvancedFilteringOnArrays": true
                    },
                    "labels": [],
                    "eventDeliverySchema": "EventGridSchema",
                    "retryPolicy": {
                        "maxDeliveryAttempts": 30,
                        "eventTimeToLiveInMinutes": 1440
                    }
                }
            },
            {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2018-07-01-preview",
            "name": "[parameters('logAnalyticsConnectionName')]",
            "tags": "[parameters('customTags')]",
            "location": "[parameters('location')]",
            "properties": {
                    "api": {
                    "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureloganalyticsdatacollector')]"
                    },
                    "displayName": "azureloganalyticsdatacollector",
                    "parameterValues": {
                    //"username": "[parameters('logAnalyticsWorkspaceId')]",
                    "username": "[reference(resourceId(parameters('logAnalyticsResourceGroup'),'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2017-03-15-preview').customerId]",
                    "password": "[listKeys(resourceId(parameters('logAnalyticsResourceGroup'),'Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), providers('Microsoft.OperationalInsights', 'workspaces').apiVersions[0]).primarySharedKey]"
                    }
                }
            },
            {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('logicAppName')]",
            "tags": "[parameters('customTags')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', parameters('logAnalyticsConnectionName'))]"
            ],
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        }
                    },
                    "triggers": {
                        "manual": {
                            "type": "Request",
                            "kind": "Http",
                            "inputs": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "data": {
                                                "properties": {
                                                    "deviceConnectionStateEventInfo": {
                                                        "properties": {
                                                            "sequenceNumber": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "deviceId": {
                                                        "type": "string"
                                                    },
                                                    "hubName": {
                                                        "type": "string"
                                                    },
                                                    "moduleId": {
                                                        "type": "string"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "dataVersion": {
                                                "type": "string"
                                            },
                                            "eventTime": {
                                                "type": "string"
                                            },
                                            "eventType": {
                                                "type": "string"
                                            },
                                            "id": {
                                                "type": "string"
                                            },
                                            "metadataVersion": {
                                                "type": "string"
                                            },
                                            "subject": {
                                                "type": "string"
                                            },
                                            "topic": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "topic",
                                            "subject",
                                            "eventType",
                                            "eventTime",
                                            "data",
                                            "dataVersion",
                                            "metadataVersion"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "actions": {
                        "For_each": {
                            "foreach": "@triggerBody()",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Send_Data": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "@{triggerBody()}",
                                                "headers": {
                                                    "Log-Type": "connectionStatus"
                                                },
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/api/logs"
                                            }
                                        }
                                    },
                                    "runAfter": {},
                                    "expression": {
                                        "and": [
                                            {
                                                "endsWith": [
                                                    "@items('For_each')['eventType']",
                                                    "nected"
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                }
                            },
                            "runAfter": {},
                            "type": "Foreach"
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azureloganalyticsdatacollector": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('logAnalyticsConnectionName'))]",
                                "connectionName": "[parameters('logAnalyticsConnectionName')]",
                                "id": "[subscriptionResourceId('Microsoft.Web/locations/managedApis', parameters('location'), 'azureloganalyticsdatacollector')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}